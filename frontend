// AI Voice Assistant Component
const AIVoiceAssistant = ({ document }) => {
  const [selectedLanguage, setSelectedLanguage] = useState(\'english\');
  const [isReading, setIsReading] = useState(false);
  const [isExtracting, setIsExtracting] = useState(false);

  const languages = [
    { code: \'english\', name: \'English\', voice: \'en-US\' },
    { code: \'hindi\', name: \'हिंदी (Hindi)\', voice: \'hi-IN\' },
    { code: \'telugu\', name: \'తెలుగు (Telugu)\', voice: \'te-IN\' }
  ];

  const extractAndReadPrescription = async () => {
    if (!document.ai_summary) {
      alert(\'Please wait for AI analysis to complete first.\');
      return;
    }

    setIsExtracting(true);
    try {
      // Call backend to extract prescription text and translate
      const response = await axios.post(`${API}/documents/read-prescription`, {
        document_id: document.id,
        language: selectedLanguage
      });

      const { prescription_text } = response.data;
      
      if (prescription_text) {
        readTextAloud(prescription_text, selectedLanguage);
      } else {
        alert(\'Could not extract prescription text from this document.\');
      }
    } catch (error) {
      console.error(\'Error extracting prescription:\', error);
      // Fallback to reading AI summary
      readTextAloud(document.ai_summary, selectedLanguage);
    } finally {
      setIsExtracting(false);
    }
  };

  const readTextAloud = (text, language) => {
    if (\'speechSynthesis\' in window) {
      // Stop any ongoing speech
      window.speechSynthesis.cancel();
      
      setIsReading(true);
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Set language-specific voice
      const selectedLang = languages.find(lang => lang.code === language);
      if (selectedLang) {
        utterance.lang = selectedLang.voice;
        
        // Try to find a native voice for the language
        const voices = window.speechSynthesis.getVoices();
        const nativeVoice = voices.find(voice => 
          voice.lang.startsWith(selectedLang.voice.split(\'-\')[0])
        );
        if (nativeVoice) {
          utterance.voice = nativeVoice;
        }
      }
      
      utterance.rate = 0.8; // Slightly slower for medical content
      utterance.pitch = 1;
      utterance.volume = 1;
      
      utterance.onend = () => {
        setIsReading(false);
      };
      
      utterance.onerror = () => {
        setIsReading(false);
        alert(\'Error reading text. Please try again.\');
      };
      
      window.speechSynthesis.speak(utterance);
    } else {
      alert(\'Text-to-speech is not supported in your browser.\');
    }
  };

  const stopReading = () => {
    if (\'speechSynthesis\' in window) {
      window.speechSynthesis.cancel();
      setIsReading(false);
    }
  };

  return (
    <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 border border-purple-200">
      <div className="flex items-center mb-3">
        <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center mr-3">
          <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
          </svg>
        </div>
        <h4 className="text-lg font-medium text-gray-900">AI Voice Assistant</h4>
      </div>
      
      <p className="text-sm text-gray-600 mb-4">
        Select your preferred language and let AI read out your prescription details
      </p>
      
      {/* Language Selection */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">Choose Language</label>
        <div className="grid grid-cols-1 gap-2">
          {languages.map((lang) => (
            <label key={lang.code} className="flex items-center">
              <input
                type="radio"
                name="language"
                value={lang.code}
                checked={selectedLanguage === lang.code}
                onChange={(e) => setSelectedLanguage(e.target.value)}
                className="mr-2 text-purple-600 focus:ring-purple-500"
              />
              <span className="text-sm text-gray-700">{lang.name}</span>
            </label>
          ))}
        </div>
      </div>
      
      {/* Action Buttons */}
      <div className="flex gap-2">
        <button
          onClick={extractAndReadPrescription}
          disabled={isReading || isExtracting}
          className="flex-1 bg-purple-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center"
        >
          {isExtracting ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Extracting...
            </>
          ) : isReading ? (
            <>
              <div className="w-4 h-4 mr-2">
                <div className="flex space-x-1">
                  <div className="w-1 h-4 bg-white animate-pulse"></div>
                  <div className="w-1 h-4 bg-white animate-pulse" style={{animationDelay: \'0.2s\'}}></div>
                  <div className="w-1 h-4 bg-white animate-pulse" style={{animationDelay: \'0.4s\'}}></div>
                </div>
              </div>
              Reading...
            </>
          ) : (
            <>
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 7.464l-4.828 4.828m0 0L8.586 10.17M10.708 12.292l-1.414 1.414m8.485-8.485l-8.485 8.485" />
              </svg>
              Read Prescription
            </>
          )}
        </button>
        
        {isReading && (
          <button
            onClick={stopReading}
            className="bg-red-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-red-700 transition-colors"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 10h6v4H9z" />
            </svg>
          </button>
        )}
      </div>
    </div>
  );
};

// Document Detail Modal
const DocumentDetailModal = ({ document, onClose }) => {
  if (!document) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-xl shadow-2xl max-w-5xl w-full max-h-[90vh] overflow-auto">
        <div className="p-6 border-b border-gray-200 flex items-center justify-between">
          <h2 className="text-2xl font-semibold text-gray-900">{document.filename}</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLineCap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="p-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Document Preview */}
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Document Preview</h3>
              {document.file_type === \'image\' ? (
                <img
                  src={`${BACKEND_URL}${document.file_url}`}
                  alt={document.filename}
                  className="w-full rounded-lg shadow-md"
                />
              ) : (
                <div className="bg-gray-100 rounded-lg p-8 text-center">
                  <svg className="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  <p className="text-gray-600">PDF Document</p>
                  <a
                    href={`${BACKEND_URL}${document.file_url}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-600 hover:text-blue-800 text-sm"
                  >
                    Open PDF
                  </a>
                </div>
              )}
            </div>
            
            {/* Document Details */}
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Document Details</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Document Date</label>
                  <p className="mt-1 text-sm text-gray-900">{document.date_of_document || \'Not specified\'}</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Doctor</label>
                  <p className="mt-1 text-sm text-gray-900">{document.doctor_name || \'Not specified\'}</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Condition</label>
                  <p className="mt-1 text-sm text-gray-900">{document.condition || \'Not specified\'}</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Medication</label>
                  <p className="mt-1 text-sm text-gray-900">{document.medication || \'Not specified\'}</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Uploaded</label>
                  <p className="mt-1 text-sm text-gray-900">
                    {new Date(document.created_at).toLocaleDateString()}
                  </p>
                </div>
              </div>
              
              {document.ai_summary && (
                <div className="mt-6">
                  <h4 className="text-lg font-medium text-gray-900 mb-3">AI Analysis Summary</h4>
                  <div className="bg-blue-50 rounded-lg p-4">
                    <p className="text-blue-900 whitespace-pre-wrap">{document.ai_summary}</p>
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {/* AI Voice Assistant */}
          <div className="mt-6">
            <AIVoiceAssistant document={document} />
          </div>
        </div>
      </div>
    </div>
  );
};
